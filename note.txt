python3 setup.py install --user
------------
options.add_argument("user-data-dir=/Users/soatra/Library/Application Support/Google/Chrome")
options.add_argument("profile-directory=Default")
# options.add_argument('no-sandbox')
# options.add_argument('headless')
# options.add_argument('disable-dev-shm-usage')
# options.add_argument('--disable-infobars')
-----
mainLinks = []
        a = driver.find_element(by=By.CLASS_NAME, value='tab2UnSelected')
        ul = driver.find_element(by=By.XPATH, value='//div[@class="tab-area"]//ul[@class="ul-normal"]')
        anchors = ul.find_elements(by=By.TAG_NAME, value='a')
        mainLinks += list(map(lambda a: a.get_attribute('href'), anchors))
        
        # after a is clicked every changes
        a.click()

        a = driver.find_element(by=By.CLASS_NAME, value='tab2UnSelected')
        ul = driver.find_element(by=By.XPATH, value='//div[@class="tab-area"]//ul[@class="ul-normal"]')
        anchors = ul.find_elements(by=By.TAG_NAME, value='a')
        mainLinks += list(map(lambda a: a.get_attribute('href'), anchors))

        for href in mainLinks:
            print(href)
-----
# options.add_argument("user-data-dir=/Users/soatra/Library/Application Support/Google/Chrome Selenium")
# options.add_argument("profile-directory=Default")
# options.add_argument('headless')
-----
class Crawler:
    global options

    sitemap = 'https://www.city.ichihara.chiba.jp/home',
    a_sitemap_selector = [
        '//div[@class="tab-area"]//ul[@class="ul-normal"]//a'
    ],
    a_sub_page_selector = [
        '//ul[@class="row ul-normal"]//a',
        '//div[@class="article-lv3category"]/ul[@class="ul-normal"]//a'
    ],
    content_selector = '//div[@class="htmlContent html_content"]/*',
    title_selector = '//div[@class="lv3Catagory"]/div[@role="heading"]',
    update_at_selector = '//div[@class="article-date"]',
    contact_selector = '//div[@class="contact-address-label"]',
    abstract_selector = '//div[@class="htmlContent html_content"]/p',
    test_mode = True

    async def crawler(self):
        try :
            driver = webdriver.Chrome(options=options)
            driver.get(self.sitemap)
            mainLinks = []

            for selector in self.a_sitemap_selector:
                try:
                    elements = driver.find_elements(By.XPATH, selector)
                    mainLinks += list(map(lambda element: element.get_attribute('href'), elements))
                except: pass

            if mainLinks:
                for link in mainLinks:
                    yield self.subWork(link)

            driver.quit()

        except Exception as ex:
            print(ex)

    async def subWork(self, link):
        try:
            driver = webdriver.Chrome(options=options)
            driver.get(link)
            subLinks = []

            for selector in self.a_sub_page_selector:
                try:
                    elements = driver.find_elements(By.XPATH, selector)
                    subLinks += list(map(lambda element: element.get_attribute('href'), elements))
                except: pass

            if len(subLinks):
                for link in subLinks:
                    yield self.subWork(link)
            else:
                yield self.detailWork(driver)
            
        except: pass
    
    async def detailWork(self, driver):
        try:
            title = driver.find_element(By.XPATH, self.title_selector)
            contact = driver.find_element(By.XPATH, self.contact_selector)
            if title and contact:
                print('title =', title.text)
                print('contact =', contact.text)
        except: pass
------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        [contentEditable=true]:empty:before {
            content: attr(placeholder);
            pointer-events: none;
            color: #8e8e8e;
        }
        [contentEditable=true] {
            outline: none;
            border: 1px solid transparent;
            border-radius: 10px;
            padding: 20px;
            width: 200px;
        }
        [contentEditable=true]:focus {
            border-color:blue;
        }
    </style>
</head>
<body>
    <form action="." method="get">
        <!-- <input type="text" placeholder="test placeholder"> -->
        <div id="edit" contenteditable="true" placeholder="write content..."></div>
        <textarea name="" id="" cols="30" rows="10" placeholder="test"></textarea>
        <button type="submit">Submit</button>
    </form>
    <script>
        const div = document.getElementById('edit');

        div.onkeyup = (evt) => {
            if (div.innerText === '\n' || div.innerText === '\r\n') {
                div.innerHTML = '';
            }
        }
        
        //div.DOMCharacterDataModified = (evt) => {
        //    console.log('change');
        //}
        
    </script>
</body>
</html>
---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        [contentEditable]:empty:before {
            content: attr(placeholder);
            pointer-events: none;
            color: #8e8e8e;
        }
        [contentEditable] {
            outline: none;
            border: 1px solid transparent;
            border-radius: 10px;
            padding: 20px;
            width: 200px;
        }
        [contentEditable]:focus {
            border-color:blue;
        }
    </style>
</head>
<body>
    <form action="." method="get">
        <!-- <textarea type="text" placeholder="test placeholder" maxlength="3"></textarea> -->
        <div
            id="edit"
            contenteditable="plaintext-only"
            placeholder="write content..."
            max-length="3"></div>
        <h1 style="background-color: red; color: white;">Test</h1>
        <!-- <textarea name="" id="" cols="30" rows="10" placeholder="test"></textarea> -->
        <button type="submit">Submit</button>
    </form>
    <script>
        const div = document.getElementById('edit');

        div.onkeydown = (evt) => {
            console.log('down');
        }

    </script>
</body>
</html>
----------
#!python3
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
import time

url = 'https://gmo-connect.com/search/category/23/23001'
options = webdriver.ChromeOptions()
driver = webdriver.Chrome(options=options)
driver.get(url)
items = ""

def clicker():
    global items
    
    try:
        wait = WebDriverWait(driver, 20)
        wait.until(lambda d: d.find_elements(By.XPATH, '//div[@class="card-content-result-summary"]//div[@class="suppliers-user"]'))
        divs = driver.find_elements(By.XPATH, '//div[@class="card-content-result-summary"]//div[@class="suppliers-user"]')
        for div in divs:
            items += div.get_attribute('outerHTML')
        button = driver.find_element(By.XPATH, '//div[@class="pagination"]/div[4][not(contains(@class, "btn-disabled"))]')
        button.click()
        clicker()

    except:
        try:
            button = driver.find_element(By.XPATH, '//div[@class="pagination"]/div[4][not(contains(@class, "btn-disabled"))]')
            if button:
                clicker()
        except:
            f = open('test.html', 'w')
            f.write(items)
            f.close()
            print('done')
  
clicker()
  
time.sleep(1000000)

----------
10
----------------
button = driver.find_element(By.XPATH, '//button[@class="o-result-control__sort__list__item__button is-active"]')
button.click()
-----------------
#!python3
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from threading import Thread
import pandas
from util import util
import time

class Crawler:    
    def __init__(
        self,
        # general
        urls,
        save_to = 'test.csv',
        
        # xpath
        td_xpath = None,
        field_xpath = {
            'name': './div[1]',
            'address': './div[3]',
            'phone': './div[4]',
        },
        next_xpath = None,

        # time (in second)
        delay_time = 3,
        loop_time = 30,
        wait_td_time = 25,
        wait_a_next_time = 2.5,
        
        # optional
        threads = 10,
        headless = True,
        detail_page = lambda driver: True
    ):
        # general
        self.__urls = urls
        self.__save_to = save_to
        
        # xpath
        self.__td_xpath = td_xpath
        self.__next_xpath = next_xpath
        self.__field_xpath = field_xpath
        
        self.__threads = threads
        
        # time (in second)
        self.__delay_time = delay_time
        self.__loop_time = loop_time
        self.__wait_td_time = wait_td_time
        self.__wait_a_next_time = wait_a_next_time
        
        # private
        self.__items = {}
        self.__length = len(self.__urls)
        self.__token = int(self.__length / self.__threads)
        self.__threads = self.__threads if self.__threads <= self.__length else self.__length
        self.__headless = headless
        self.__detail_page = detail_page
        
    def run(self):
        threads = []
        
        for i in range(0, self.__threads):
            start = i * self.__token
            end = 0
            if i == self.__threads - 1:
                end = self.__length
                threads.append(
                    Thread(
                        target=self.__worker,
                        kwargs={
                            'start': start,
                            'end': end
                        }
                    )
                )
                for thread in threads:
                    thread.start()
                    
                for thread in threads:
                    thread.join()
                    
                self.__save(self.__save_to)
                
            else:
                end = start + self.__token
                threads.append(
                    Thread(
                        target=self.__worker,
                        kwargs={
                            'start': start,
                            'end': end
                        }
                    )
                )

    def __worker(self, start, end):
        print(f'--- running ({start}, {end})')
        
        global items

        key = str(start)
        options = webdriver.ChromeOptions()
        if self.__headless:
            options.add_argument("--headless")
        driver = webdriver.Chrome(options=options)

        if not key in self.__items:
            self.__items[key] = []
        items = self.__items[key]

        for i in range(start, end):
            link = self.__urls[i]
            print(f'{util.now()}: {link}')
            
            driver.get(link)
            time.sleep(self.__delay_time)
            
            start_time = int(time.time())
            
            while True:
                try:
                    td_error = False
                    if self.__td_xpath:
                        wait = WebDriverWait(driver, self.__wait_td_time)
                        wait.until(lambda d: d.find_elements(By.XPATH, self.__td_xpath))
                        tds = driver.find_elements(By.XPATH, self.__td_xpath)
                    else:
                        tds = [driver]
                    
                    if (
                        not self.__detail_page(driver) or
                        len(tds) == 0
                    ):
                        if self.__next_xpath:
                            self.__click_next(driver)
                        else:
                            break
                    
                    for j in range(0, len(tds)):
                        _id = str(i + j) + driver.page_source
                        td = tds[j]
                        
                        try:
                            obj = {}
                            website = ''

                            for key in self.__field_xpath:
                                xpath = self.__field_xpath[key]
                                selector = td.find_element(By.XPATH, xpath)
                                content = util.get_content(link, selector)
                                text = util.content_to_text(content)
                                
                                obj[key] = text
                                
                                if content['link'] and website == '':
                                    website = content['link']
                                    
                            obj['website'] = website
                            obj['_id'] = _id
                            
                            if not (
                                util.find(
                                    lambda each: each['_id'] == _id,
                                    items
                                )
                            ):
                                items.append(obj)
                            
                        except:
                            td_error = True
                            pass
                    
                    if (
                        not td_error or
                        int(time.time()) - start_time >= self.__loop_time
                    ):
                        start_time = int(time.time())
                        if self.__next_xpath:
                            a_next = driver.find_element(By.XPATH, self.__next_xpath)
                            a_next.click()
                            
                        else:
                            break

                except:
                    try:
                        if self.__next_xpath:
                            wait = WebDriverWait(driver, self.__wait_a_next_time)
                            wait.until(lambda d: d.find_elements(By.XPATH, self.__next_xpath))
                            a_next = driver.find_element(By.XPATH, self.__next_xpath)
                            a_next.click()
                            
                        else:
                            break

                    except:
                        break
            
            if i == end - 1:
                driver.close()
                
    def __worker_deep(self, items):
        
        return

    def __save(self, path):
        streams = []
        
        for key in self.__items:
            streams += self.__items[key]
        
        columns = self.__columns(streams[0])
        frame = pandas.json_normalize(streams)
        frame.to_csv(path, index=False, columns=columns)
        
        print('------------------- done \n')
        print(f'length: {len(streams)}')
        print('\n-------------------')
        
    def __columns(self, obj):
        columns = list(obj.keys())
        columns = list(filter(lambda each: each != '_id', columns))
        return columns
    
    def __click_next(self, driver):
        try:
            a_nexts = driver.find_elements(By.XPATH, self.__next_xpath)
            for a_next in a_nexts:
                a_next.click()
        except:
            pass
        
-------------- while
start_time = int(time.time())
            while True:
                try:
                    td_error = False
                    if self.__td_xpath:
                        wait = WebDriverWait(driver, self.__wait_td_time)
                        wait.until(lambda d: d.find_elements(By.XPATH, self.__td_xpath))
                        tds = driver.find_elements(By.XPATH, self.__td_xpath)
                    else:
                        tds = [driver]
                    
                    if (
                        not self.__detail_page(driver) or
                        len(tds) == 0
                    ):
                        if self.__next_xpath:
                            self.__click_next(driver, items)

                        else:
                            break
                    
                    for j in range(0, len(tds)):
                        td = tds[j]
                        _id = str(td) if self.__td_xpath else driver.page_source
                        
                        try:
                            obj = {}
                            website = ''

                            for key in self.__field_xpath:
                                xpath = self.__field_xpath[key]
                                selector = td.find_element(By.XPATH, xpath)
                                content = util.get_content(driver.current_url, selector)
                                text = util.content_to_text(content)
                                
                                obj[key] = text
                                
                                if content['link'] and website == '':
                                    website = content['link']
                                    
                            obj['website'] = website
                            obj['_id'] = _id
                            
                            if not (
                                util.find(
                                    lambda each: each['_id'] == _id,
                                    items
                                )
                            ):
                                items.append(obj)
                            
                        except:
                            td_error = True
                            pass
                    
                    if (
                        not td_error or
                        int(time.time()) - start_time >= self.__loop_time
                    ):
                        start_time = int(time.time())
                        if self.__next_xpath:
                            self.__click_next(driver, items)
                        else:
                            break

                except:
                    try:
                        if self.__next_xpath:
                            self.__click_next(driver, items)
                        else:
                            break

                    except:
                        break
---------------------